(function () {
    'use strict';

    angular
        .module('demoApp', [
            'ngSanitize',
            'ngMaterial',
            'ngAnimate',
            'oitozero.ngSweetAlert',
            'treasure-overlay-spinner',
            'com.2fdevs.videogular',
            'com.2fdevs.videogular.plugins.controls',
            'com.2fdevs.videogular.plugins.overlayplay'
        ])

        .constant('BASE_URL', window.location.origin)
        .config(["$mdThemingProvider", function ($mdThemingProvider) {
            $mdThemingProvider.theme('default')
                .primaryPalette('red')
                .accentPalette('pink');
        }]);

    //console.log('demo app initialized!');

}());


(function(){
'use strict';

angular.module('demoApp')
    .factory('webServices', ["webRequest", webServices]);

    function webServices(webRequest) {
        var service = {};

        /*
        * Meters
        */
        //service.getMeters = function (zoomLevel) {
        //    return webRequest.get('/api/meters');
        //};
        //
        //service.getMeterClustersByZoom = function (zoomLevel) {
        //    return webRequest.get('/api/meters/clusters/zoom/' + zoomLevel);
        //};
        //
        //service.getMeterClustersByZoomAndBounds = function (zoomLevel, bounds) {
        //    return webRequest.get('/api/meters/clusters/zoom/' + zoomLevel + '/bounds/' + bounds);
        //};
        //
        //service.getMetersWithinBounds = function (bounds) {
        //    return webRequest.get('/api/meters/bounds/' + bounds);
        //};
        //
        //service.getMetersByID = function (id) {
        //    return webRequest.get('/api/meters/' + id);
        //};
        //
        //service.getMetersBounds = function () {
        //  return webRequest.get('/api/meters/get_bounds');
        //};
        //
        //service.getMeterByMeterNo = function (meterNo) {
        //    return webRequest.get('/api/meters/get_by_meter_no/' + meterNo);
        //}

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .factory('loaderServices', ['$rootScope', loaderServices]);

    function loaderServices ($rootScope) {
        var service = {};

        service.showLoader = showLoader;
        service.hideLoader = hideLoader;

        function showLoader () {
            $rootScope.spinner.active = true;
        }

        function hideLoader (_doApply) {
            var doApply = _doApply || false;
            if(doApply) {
                $rootScope.$apply(function () {
                    $rootScope.spinner.active = false;
                });
            } else {
                $rootScope.spinner.active = false;
            }
        }
        

        return service;
    }
}());
(function(){
    'use strict';

    angular.module('demoApp')
        .factory('gmapServices', ['GMAP_STYLES', gmapServices]);

    function gmapServices(GMAP_STYLES) {
        var service = {};

        //infowindow balloons
        service.INFO_WINDOWS = [];

        service.ZOOM_OUT_LEVEL = 8;
        service.ZOOM_IN_LEVEL = 17;

        service.map = null;
        service.mapProjection = null;
        service.overlayView = null;

        service.geocoder = null;

        service.markers = [];

        service.defaultZoom = service.ZOOM_IN_LEVEL;

        service.defaultLatLng = new google.maps.LatLng(37.4150183, -121.9381816);

        // Maintain only one infobox
        // Prevent from opening multiple infoboxes
        service.lastInfoboxOpen = null;
        service.infoboxes = [];

        service.directionsService = null;
        service.directionsDisplay = null;

        /**
         * Service Functions
         */
        service.apiAvailable = apiAvailable;
        service.createMap = createMap;
        service.addMapListener = addMapListener;
        service.getDistanceOfPath = getDistanceOfPath;
        service.fromLatLngToContainerPixel = fromLatLngToContainerPixel;
        service.fromLatLngToDivPixel = fromLatLngToDivPixel;
        service.fromLatLngToPoint = fromLatLngToPoint;
        service.createCoordinate = createCoordinate;
        service.createInfoWindow = createInfoWindow;
        service.showInfoWindow = showInfoWindow;
        service.hideInfoWindow = hideInfoWindow;
        service.clearInstanceListeners = clearInstanceListeners;
        service.initMarker = initMarker;
        service.createMarker = createMarker;
        service.createCustomMarker = createCustomMarker;
        service.createCircleMarker = createCircleMarker;
        service.panTo = panTo;
        service.showMarker = showMarker;
        service.showMarkers = showMarkers;
        service.hideMarker = hideMarker;
        service.hideMarkers = hideMarkers;
        service.destroyMarker = destroyMarker;
        service.centerMarker = centerMarker;
        service.setMapCenter = setMapCenter;
        service.setMapCenterDefault = setMapCenterDefault;
        service.setZoom = setZoom;
        service.setZoomIfGreater = setZoomIfGreater;
        service.setZoomDefault = setZoomDefault;
        service.setZoomInDefault = setZoomInDefault;
        service.createPolyline = createPolyline;
        service.destroyPolyline = destroyPolyline;
        service.createDashedPolyline = createDashedPolyline;
        service.updatePolyline = updatePolyline;
        service.showPolyline = showPolyline;
        service.hidePolyline = hidePolyline;
        service.addListener = addListener;
        service.addListenerOnce = addListenerOnce;
        service.clearInstanceListeners = clearInstanceListeners;
        service.clearListeners = clearListeners;
        service.removeListener = removeListener;
        service.triggerEvent = triggerEvent;
        service.computeBearing = computeBearing;
        service.initCanvasMarker = initCanvasMarker;
        service.castToLatLngObject = castToLatLngObject;
        service.applyMapStyle = applyMapStyle;
        //service.initDirectionsService = initDirectionsService;

        function apiAvailable() {
            return typeof window.google === 'object';
        }

        function createMap(mapId) {
            var mapIdLoc = mapId || 'map3d';
            var myMapId = '#' + mapIdLoc;

            if (service.map) return service.map;
            if (!service.apiAvailable()) return null;

            var mapOptions = {
                zoom: service.defaultZoom,
                minZoom: 2,
                center: service.defaultLatLng,
                mapTypeId: google.maps.MapTypeId.MAP,
                mapTypeControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_TOP
                },
                zoomControlOptions: {
                    position: google.maps.ControlPosition.RIGHT_BOTTOM
                },
                panControl: false
            };

            $(myMapId).height($(window).height() - (42));

            service.map = new google.maps.Map(document.getElementById(mapIdLoc), mapOptions);

            // handle window resize event
            google.maps.event.addDomListener(window, 'resize', function () {
                $(myMapId).height($(window).height() - (42));
                var center = service.map.getCenter();
                google.maps.event.trigger(service.map, 'resize');
                service.map.setCenter(center);
            });

            // apply map styles
            //service.applyMapStyle(GMAP_STYLES);

            return service.map;
        }
        function addMapListener(eventName, callback) {
            if (service.map) {
                return service.addListener(service.map, eventName, callback);
            }
            return null;
        }
        function getDistanceOfPath(path) {
            if (!service.apiAvailable()) return 0;
            return google.maps.geometry.spherical.computeLength(path);
        }

        function fromLatLngToContainerPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToContainerPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToDivPixel(latlng) {
            if (service.overlayView) {
                return service.overlayView.getProjection().fromLatLngToDivPixel(latlng);
            }
            return new google.maps.Point();
        }

        function fromLatLngToPoint(latlng) {
            if (service.map) {
                var numTiles = 1 << service.map.getZoom();
                var projection = new MercatorProjection();
                var worldCoordinate = projection.fromLatLngToPoint(latlng);
                return new google.maps.Point(
                    worldCoordinate.x * numTiles,
                    worldCoordinate.y * numTiles
                );
            } else {
                return new google.maps.Point();
            }
        }

        function createCoordinate(latitude, longitude) {
            return new google.maps.LatLng(latitude, longitude);
        }

        function createInfoWindow(content) {
            if (!service.apiAvailable()) return null;
            return new google.maps.InfoWindow({content: content});
        }

        function showInfoWindow(infoWindow, target) {
            if (infoWindow) infoWindow.open(service.map, target);
        }

        function hideInfoWindow(infoWindow) {
            if (infoWindow) infoWindow.close();
        }

        function initMarker(_position, _icon, _opts) {
            if (!service.apiAvailable()) return null;

            var additionalOpts = _opts || {};

            var opts = angular.extend({}, {
                position: _position,
                map: service.map,
                icon: _icon
            }, additionalOpts);

            return new google.maps.Marker(opts);
        }

        function createMarker(_position, _color) {
            _color = _color || service.MARKER_ICONS.RED;
            var marker = service.initMarker(_position, _color);

            service.markers.push(marker);

            return marker;
        }

        function createCustomMarker(_position, _icon, _opts) {
            var opts = _opts || {},
                icon = _icon || 'images/markers/default-marker.png';

            return service.initMarker(_position, icon, opts);
        }

        function createCircleMarker(_position, color) {
            var icon = {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 5,
                fillColor: color || '#6ac1ff',
                fillOpacity: 1,
                strokeColor: 'black',
                strokeWeight: 1
            };

            var marker = service.initMarker(_position, icon);
            service.markers.push(marker);

            return marker;
        }

        function panTo(_position) {
            if (!service.map) return;

            service.map.panTo(_position);
        }

        function showMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(service.map);
        }

        function showMarkers(markerArray) {
            markerArray.forEach(function (marker) {
                service.showMarker(marker);
            });
        }

        function hideMarker(marker) {
            if (marker && marker instanceof google.maps.Marker) marker.setMap(null);
        }

        function hideMarkers(markerArray) {
            markerArray.forEach( function(marker) {
                service.hideMarker(marker);
            });
        }

        function destroyPolyline(polyline) {
            if (polyline && polyline instanceof google.maps.Polyline) polyline.setMap(null);
            service.clearInstanceListeners(polyline);
            polyline = null;
        }

        function destroyMarker(marker) {
            if (marker instanceof Cluster) {
                marker.remove();
            }
            else if (marker instanceof google.maps.Marker) {
                service.hideMarker(marker);
                service.clearInstanceListeners(marker);
            }
            marker = null;
        }

        function centerMarker(marker) {
            if (service.map) {
                service.map.setCenter(marker.position);
            }
        }

        function setMapCenter(coordinates) {
            if (service.map) {
                service.map.setCenter(coordinates);
            }
        }

        function setMapCenterDefault() {
            service.setMapCenter(service.defaultLatLng);
        }

        function setZoom(zoomValue) {
            if (service.map) {
                service.map.setZoom(zoomValue);
            }
        }

        function setZoomIfGreater(zoomValue) {
            if (zoomValue > service.map.getZoom())
                service.setZoom(zoomValue);
        }

        function setZoomDefault() {
            service.setZoom(service.defaultZoom);
        }

        function setZoomInDefault() {
            service.setZoom(service.ZOOM_IN_LEVEL);
        }

        function createPolyline(path, lineColor) {
            if (!service.apiAvailable()) return null;

            var polylineOptions = {
                path: path,
                strokeColor: lineColor || '#ff0000',
                strokeOpacity: 1,
                strokeWeight: 2
            };

            return new google.maps.Polyline(polylineOptions);
        }

        function createDashedPolyline(path, lineColor) {
            if (!service.apiAvailable()) return null;

            var lineSymbol = {
                path: 'M 0,-1 0,1',
                strokeOpacity: 0.3,
                scale: 2
            };

            var polylineOptions = {
                path: path,
                clickable: true,
                draggable: false,
                editable: false,
                map: service.map,
                strokeColor: lineColor || '#ff0000',
                icons: [{
                    icon: lineSymbol,
                    offset: '0',
                    repeat: '15px'
                }],
                strokeOpacity: 0,
                zIndex: 100
            };
            return new google.maps.Polyline(polylineOptions);
        }

        function updatePolyline(polyline, path) {
            if (polyline) polyline.setPath(path);
        }

        function showPolyline(polyline) {
            if (polyline) polyline.setMap(service.map);
        }

        function hidePolyline(polyline) {
            if (polyline) polyline.setMap(null);
        }

        function addListener(instance, eventName, handler) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListener(instance, eventName, handler);
        }

        function addListenerOnce(instance, eventName, handler, capture) {
            if (!service.apiAvailable()) return null;
            return google.maps.event.addListenerOnce(instance, eventName, handler, capture);
        }

        function clearInstanceListeners(instance) {
            if (service.apiAvailable())
                google.maps.event.clearInstanceListeners(instance);
        }

        function clearListeners(instance, eventName) {
            if (service.apiAvailable())
                google.maps.event.clearListeners(instance, eventName);
        }

        function removeListener(listener) {
            if (service.apiAvailable())
                google.maps.event.removeListener(listener);
        }

        function triggerEvent (obj, event) {
            google.maps.event.trigger(obj, 'click');
        }

        function computeBearing(from, to) {
            // Convert to radians.
            var lat1 = from.latRadians();
            var lon1 = from.lngRadians();
            var lat2 = to.latRadians();
            var lon2 = to.lngRadians();

            // Compute the angle.
            var angle = -Math.atan2(Math.sin(lon1 - lon2) * Math.cos(lat2), Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2));

            if (angle < 0.0) angle += Math.PI * 2.0;

            return angle;
        }

        function initCanvasMarker (position, canvasId, iconPath, pixelOffset) {
            var img = new Image();
                img.src = iconPath;

            return new CanvasMarker({
                position: position,
                id: canvasId,
                image: img,
                pixelOffset: pixelOffset || new google.maps.Size(-16, 16),
                map: service.map
            })
        }

        function castToLatLngObject (latLngLiteral) {
            return new google.maps.LatLng(latLngLiteral);
        }

        function applyMapStyle (mapStyles) {
            service.map.setOptions({styles: mapStyles});
        }

        //function initDirectionsService () {
        //    service.directionsService = new google.maps.DirectionsService();
        //    service.directionsDisplay = new google.maps.DirectionsRenderer();
        //}

        return service;
    }
}());


(function(){
'use strict';

angular.module('demoApp')
    .factory('carServices', ['CAR_PATH', 'CAR_PATH_DISTANCE', 'CAR_ICON', '$rootScope', '$timeout', 'gmapServices', carServices]);

    function carServices (CAR_PATH, CAR_PATH_DISTANCE, CAR_ICON, $rootScope, $timeout, gmapServices) {
        var service = {};

        var carCanvasId = 'carcanvas';

        var polyline = null,
            polylinePath = []
        ;

        var img = new Image();
            img.src = CAR_ICON;

        var eol = CAR_PATH_DISTANCE,// eol is distance generated by directions service ex. result.routes[0].legs[0].distance.value
            k = 0,
            step = 5,
            angle = 0,
            dstep = 0
        ;

        service.lastVertex = 0;
        service.speed = 100,
        service.car = null;

        service.isPaused = false;
        // force pause
        //service.paused_ = false;

        service.initialize = initialize;
        service.runCar = runCar;
        service.startCar = startCar;
        service.resetCar = resetCar;

        service.accelerate = accelerate;

        service.accelerateCar = accelerateCar;
        service.pauseCar = pauseCar;

        service.changeSpeed = changeSpeed;
        service.slowDown = slowDown;
        service.accelerateCarAfter = accelerateCarAfter;


        function initialize () {
            //polyline = gmapServices.createDashedPolyline(CAR_PATH, '#000000');
            polyline = gmapServices.createPolyline(CAR_PATH);
            polylinePath = polyline.getPath().getArray();
            //gmapServices.showPolyline(polyline);

            resetCar();
        }

        function resetCar () {
            var p0 = gmapServices.castToLatLngObject(CAR_PATH[0]),
                p1 = gmapServices.castToLatLngObject(CAR_PATH[1]);

            gmapServices.setMapCenter(p0);

            initCar(p0, p1);
        }

        function initCar(p0, p1) {
            if(!service.car) service.car = gmapServices.initCanvasMarker(p0, carCanvasId, CAR_ICON);
            else service.car.setPoint(p0);

            angle = gmapServices.computeBearing(p0, p1);

            service.car.plot(angle);
        }

        function runCar (distance) {
            //console.log('run car: ',distance);

            if( !service.isPaused) { // && !service.paused_
                var point = polyline.GetPointAtDistance(distance);

                if (distance > eol || !point) {
                    var msg = 'Distance: ' + (distance / 1609.344).toFixed(2) + ' miles';
                    $rootScope.$broadcast('trip-completed', {message: msg});
                    return;
                }

                if ( k++ >= 180 / step ) {
                    gmapServices.panTo(point);
                    k = 0;
                }

                service.car.setPoint(point);

                //console.log("Miles: " + (distance / 1609.344).toFixed(2) + service.speed);

                if (polyline.GetIndexAtDistance(distance) > service.lastVertex) {
                    service.lastVertex = polyline.GetIndexAtDistance(distance);
                    if (service.lastVertex == polylinePath.length) {
                        service.lastVertex -= 1;
                    }

                    while (polylinePath[service.lastVertex - 1].equals(polylinePath[service.lastVertex])) {
                        service.lastVertex -= 1;
                    }

                    angle = gmapServices.computeBearing(
                        polylinePath[service.lastVertex - 1],
                        polylinePath[service.lastVertex]
                    );

                    service.car.plot(angle);
                }

                dstep = distance + step;
            }

            $timeout(function(){
                service.runCar(dstep);
            }, service.speed);
        }

        function startCar () {
            if(service.isPaused) {
                accelerateCar();
                return;
            }

            if (service.car && !service.car.getMap()) service.car.setMap(gmapServices.map);

            $timeout(function(){
                service.runCar(0);
            }, 0);
        }

        function accelerate (speed) {
            var _speed = speed || 100;

            changeSpeed(_speed);
            service.isPaused = false;
        }

        function accelerateCar () {
            $timeout(function(){
                changeSpeed(100);
            }, 10000);

            service.isPaused = false;
        }

        function pauseCar () {
            //changeSpeed(200);
            service.isPaused = true;
            //service.paused_ = true;
        }

        function slowDown(speed) {
            if(service.isPaused) service.isPaused = false;

            changeSpeed(speed);
        }

        function changeSpeed (speed) {
            service.speed = speed;
        }

        function accelerateCarAfter (timeMillis, speed) {
            var _timeMillis = timeMillis || 2000,
                _speed = speed || 100;

            $timeout(function(){
                accelerate(_speed);
            }, _timeMillis);
        }

        return service;
    }
}());
(function () {
'use strict';

angular.module('demoApp')
    .factory('alertServices', ['SweetAlert', alertServices]);

    function alertServices(SweetAlert) {
        var service = {};

        service.showReplayVideoPrompt = showReplayVideoPrompt;

        function showReplayVideoPrompt (message, replayCallback) {
            SweetAlert.swal({
                    title: "Trip Completed!",
                    text: message,
                    type: "info",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Play Again",
                    closeOnConfirm: true
                },
                function () {
                    replayCallback();
                });
        }

        return service;
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('videoController', ['$rootScope', '$sce', 'carServices', videoController]);

    function videoController ($rootScope, $sce, carServices) {
        var vm = this;

        var time = 0;

        var videoPath = 'videos/tiz-20160125-101958.mp4';

        vm.config = {
            sources: [
                {
                    src: $sce.trustAsResourceUrl(videoPath),
                    type: "video/mp4"
                }
            ],
            theme: "css/style.min.css",
            plugins: {
                controls: {
                    autoHide: true,
                    autoHideTime: 2000
                }
            }
        };

        vm.initialize = initialize;
        vm.updateState = updateState;
        vm.updateTime = updateTime;

        vm.onPlayerReady = onPlayerReady;

        vm.initialize();

        function initialize () {
            window.onresize = function () {
                $('#video-canvas').height($(window).height() - (42));
            };

            $rootScope.$on('reset-video', resetVideo);
        }

        function onPlayerReady(API) {
            vm.API = API;
        }

        function updateState (state) {
            $rootScope.$broadcast('video-player-state-changed', {state: state});
        }

        function resetVideo () {
            //console.log('resetting video');
            vm.API.seekTime(0);
            vm.API.play();
        }

        function updateTime (rawTime) {
            time = rawTime.toFixed(1);

            console.log('Time: ',time);

            if(time > 4.5 && time < 6) {
                carServices.pauseCar();
                carServices.accelerateCarAfter(4000);
            } else if(time > 6 && time < 13) {
                carServices.slowDown(300);
            }
            else if (time > 14 && time < 20) {
                carServices.changeSpeed(90);
            }
            else if (time > 28.5 && time < 31.5) {
                carServices.slowDown(200);
                carServices.accelerateCarAfter(2000);
            }
            else if (time > 41 && time < 49.5) {
                console.log('first stop on bridge');
                carServices.pauseCar();
            }

            else if (time > 49.5 && time < 51.5) {
                console.log('first accelerate on bridge');
                carServices.accelerateCarAfter(0, 300);
            }
            else if (time > 51.5 && time < 58) {
                console.log('second stop on bridge');
                carServices.pauseCar();
            }
            else if (time > 58 && time < 58.5) {
                console.log('second accelerate on bridge');
                carServices.accelerateCarAfter(0, 300);
            }
            else if (time > 58.5 && time < 62.5) {
                console.log('third stop on bridge');
                carServices.pauseCar();
            }

            else if (time > 62.5 && time < 68.5) {
                console.log('third accelerate on bridge');
                carServices.accelerateCarAfter(0, 205);
            }

            else if (time > 68.5 && time < 82) {
                console.log('accelerate after uturn on bridge');
                carServices.accelerateCarAfter(0, 70);
            }

            else if (time > 82 && time < 84.8) {
                console.log('change speed');
                carServices.changeSpeed(100);
            }

            else if (time > 84.3 && time < 85.5) {
                console.log('slowing down');
                carServices.changeSpeed(300);
            }

            else if (time > 85.5 && time < 85.8) {
                console.log('first stop on stop light');
                carServices.pauseCar();
            }

            else if (time > 85.8 && time < 94) {
                console.log('first accelerate after stop light');
                carServices.accelerate(100);
            }

            else if (time > 94 && time < 121.3) {
                console.log('second stop on stop light');
                carServices.pauseCar();
            }

            else if (time > 121.3 && time < 131) {
                console.log('second accelerate after stop light');
                carServices.accelerate(110);
            }


            else if (time > 131 && time < 133.4) {
                console.log('third stop on stop light');
                carServices.pauseCar();

                // first stop before samsung
            }

            else if (time > 133.4 && time < 141.2) {
                console.log('third accelerate after stop light');
                carServices.accelerate(100);
            }

            else if (time > 141.2 && time < 160) {
                console.log('fourth stop on stop light');
                carServices.pauseCar();

                // stop across samsung
            }

            else if (time > 160 && time < 167) {
                console.log('fourth accelerate after stop light');
                carServices.accelerate(90);
            }

            else if (time > 167 && time < 168) {
                console.log('slowing down');
                carServices.changeSpeed(200);
            }


            else if (time > 168 && time < 174) {
                console.log('fifth accelerate after stop light');
                carServices.accelerate(80);
            }
        }

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('mapLayerPanelController', ['$mdSidenav', mapLayerPanelController]);

    function mapLayerPanelController ($mdSidenav) {
        var vm = this;

        vm.layers = [
            {
                label: 'Meters',
                selected: false
            },
            {
                label: 'Primary Circuits',
                selected: false
            },
            {
                label: 'Secondary Circuits',
                selected: false
            },
            {
                label: 'Transformers',
                selected: false
            },
            {
                label: 'Poles',
                selected: false
            },
            {
                label: 'Outages',
                selected: false
            },
            {
                label: 'Imagery',
                selected: false
            }
        ];

        //vm.initialize = initialize;
        //
        //vm.initialize();

        /* Controller Functions here */

        //function initialize () {
        //
        //}


        /* Non Scope Functions here */

    }
}());
(function () {
    'use strict';

    angular.module('demoApp')
        .controller('layerController', [layerController]);

    function layerController() {
        var vm = this;

        vm.layers = [
            {
                label: 'Layer1',
                action: 'layerCtl.toggleLayer1()',
                selected: false
            },
            {
                label: 'Layer2',
                action: 'layerCtl.toggleLayer2()',
                selected: false
            },
            {
                label: 'LayerWithChildren1',
                action: '',
                selected: false,
                children: [
                    {
                        label: 'Child1-1',
                        selected: false,
                        action: ''
                    },
                    {
                        label: 'Child1-2',
                        selected: false,
                        action: ''
                    }
                ]
            },
            {
                label: 'LayerWithChildren2',
                action: '',
                selected: false,
                children: [
                    {
                        label: 'Child2-1',
                        selected: false,
                        action: ''
                    },
                    {
                        label: 'Child2-2',
                        selected: false,
                        action: ''
                    }
                ]
            }
        ];


        vm.toggleLayer1 = toggleLayer1;
        vm.toggleLayer2 = toggleLayer2;


        function toggleLayer1 () {
            if (vm.layers[0].selected) {
                console.log('turn on layer1');
            } else {
                console.log('turn off layer1');
            }
        }

        function toggleLayer2 () {
            if (vm.layers[1].selected) {
                console.log('turn on layer2');
            } else {
                console.log('turn off layer2');
            }
        }
        /* Non Scope Functions here */

    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('indexController', ['$rootScope', indexController]);

    function indexController ($rootScope) {
        var vm = this;

        // Show Treasure Overlay Spinner
        $rootScope.spinner = {
            active: false
        };

        vm.initialize = initialize;

        //vm.initialize();

        function initialize() {
            console.log('initialize called');
        }
    }
}());
(function(){
'use strict';

angular.module('demoApp')
    .controller('gmapController', ['$rootScope', 'VG_STATES', 'carServices', 'gmapServices', 'alertServices', gmapController]);

    function gmapController($rootScope, VG_STATES, carServices, gmapServices, alertServices) {

        var vm = this;

        vm.initialize = initialize;

        google.maps.event.addDomListener(window, 'load', initialize);

        function initialize () {
           gmapServices.createMap('map-canvas');

            // angular service
            carServices.initialize();

            $rootScope.$on('video-player-state-changed', videoStateChanged);
            $rootScope.$on('trip-completed', tripCompletedCallback);
        }

        function tripCompletedCallback (event, param) {
            alertServices.showReplayVideoPrompt(param.message, function () {
                carServices.resetCar();
                carServices.accelerate();
                $rootScope.$broadcast('reset-video');
            });
        }

        function videoStateChanged (event, param) {
            if(param.state === VG_STATES.PLAY) {
                // angular service
                carServices.startCar();
                console.log('video is played');
            } else {
                // angular service
                carServices.pauseCar();
                console.log('video is paused');
            }
        }

    }
}());
(function () {
    'use strict';

    angular.module('demoApp')
        .controller('filterController', ['gmapServices', 'alertServices', filterController]);

    function filterController(gmapServices, alertServices) {
        var vm = this;

        vm.filterLayer = '';

        var searchMarker = null;
        var searchInfowindow = null;

        var autocomplete = null;

        vm.initialize = initialize;

        vm.initialize();

        /* Controller Functions here */

        function initialize() {
            autocomplete = gmapServices.initializeAutocomplete('filter-location-input');

            autocomplete.addListener('place_changed', placeChangeCallback);
        }


        //function showResult(data) {
        //    if (!searchInfowindow) searchInfowindow = gmapServices.createInfoWindow('');
        //
        //    if (!searchMarker) {
        //        searchMarker = gmapServices.createCustomMarker(data.coordinates);
        //    } else {
        //        if (!searchMarker.getMap()) gmapServices.showMarker(searchMarker);
        //
        //        searchMarker.setPosition(data.coordinates);
        //    }
        //
        //    searchInfowindow.setContent(data.content);
        //
        //    gmapServices.addListener(searchMarker, 'click', function () {
        //        searchInfowindow.open(gmapServices.map, searchMarker);
        //    });
        //
        //    gmapServices.triggerEvent(searchMarker, 'click');
        //}
        //
        //function hideSearchMarker() {
        //    if (searchMarker && searchMarker.getMap()) {
        //        gmapServices.hideMarker(searchMarker);
        //    }
        //}

        function placeChangeCallback() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                alert("Autocomplete's returned place contains no geometry");
                return;
            }
            //console.log('Place Changed!', place);
            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                gmapServices.map.fitBounds(place.geometry.viewport);
            } else {
                gmapServices.map.setCenter(place.geometry.location);
                gmapServices.map.setZoom(15);
            }
        }


        /* Non Scope Functions here */

    }
}());
(function(){
'use strict';

    var lightDream = [{
        "featureType": "landscape",
        "stylers": [{"hue": "#FFBB00"}, {"saturation": 43.400000000000006}, {"lightness": 37.599999999999994}, {"gamma": 1}]
    }, {
        "featureType": "road.highway",
        "stylers": [{"hue": "#FFC200"}, {"saturation": -61.8}, {"lightness": 45.599999999999994}, {"gamma": 1}]
    }, {
        "featureType": "road.arterial",
        "stylers": [{"hue": "#FF0300"}, {"saturation": -100}, {"lightness": 51.19999999999999}, {"gamma": 1}]
    }, {
        "featureType": "road.local",
        "stylers": [{"hue": "#FF0300"}, {"saturation": -100}, {"lightness": 52}, {"gamma": 1}]
    }, {
        "featureType": "water",
        "stylers": [{"hue": "#0078FF"}, {"saturation": -13.200000000000003}, {"lightness": 2.4000000000000057}, {"gamma": 1}]
    }, {
        "featureType": "poi",
        "stylers": [{"hue": "#00FF6A"}, {"saturation": -1.0989010989011234}, {"lightness": 11.200000000000017}, {"gamma": 1}]
    }];

    var pastelTones = [{
        "featureType": "landscape",
        "stylers": [{"saturation": -100}, {"lightness": 60}]
    }, {
        "featureType": "road.local",
        "stylers": [{"saturation": -100}, {"lightness": 40}, {"visibility": "on"}]
    }, {
        "featureType": "transit",
        "stylers": [{"saturation": -100}, {"visibility": "simplified"}]
    }, {"featureType": "administrative.province", "stylers": [{"visibility": "off"}]}, {
        "featureType": "water",
        "stylers": [{"visibility": "on"}, {"lightness": 30}]
    }, {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [{"color": "#ef8c25"}, {"lightness": 40}]
    }, {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [{"visibility": "off"}]
    }, {
        "featureType": "poi.park",
        "elementType": "geometry.fill",
        "stylers": [{"color": "#b6c54c"}, {"lightness": 40}, {"saturation": -40}]
    }, {}];

    angular.module('demoApp')
        //.value('GMAP_STYLES', lightDream);
        .value('GMAP_STYLES', pastelTones);

}());
(function(){
    'use strict';

    var pathFromDirections = [
        {
            "lat": 37.40458,
            "lng": -121.93255
        },
        {
            "lat": 37.40457,
            "lng": -121.93245
        },
        {
            "lat": 37.404540000000004,
            "lng": -121.93233000000001
        },
        {
            "lat": 37.404500000000006,
            "lng": -121.93215000000001
        },
        {
            "lat": 37.40446,
            "lng": -121.93200000000002
        },
        {
            "lat": 37.404360000000004,
            "lng": -121.93158000000001
        },
        {
            "lat": 37.404230000000005,
            "lng": -121.93106000000002
        },
        {
            "lat": 37.40406,
            "lng": -121.93037000000001
        },
        {
            "lat": 37.40388,
            "lng": -121.92961000000001
        },
        {
            "lat": 37.403830000000006,
            "lng": -121.92944000000001
        },
        {
            "lat": 37.40381,
            "lng": -121.92934000000001
        },
        {
            "lat": 37.403780000000005,
            "lng": -121.92920000000001
        },
        {
            "lat": 37.40377,
            "lng": -121.92916000000001
        },
        {
            "lat": 37.40377,
            "lng": -121.92916000000001
        },
        {
            "lat": 37.403850000000006,
            "lng": -121.92913000000001
        },
        {
            "lat": 37.40431,
            "lng": -121.92899000000001
        },
        {
            "lat": 37.40439000000001,
            "lng": -121.92896
        },
        {
            "lat": 37.404450000000004,
            "lng": -121.92894000000001
        },
        {
            "lat": 37.40458,
            "lng": -121.92889000000001
        },
        {
            "lat": 37.40476,
            "lng": -121.92882000000002
        },
        {
            "lat": 37.405570000000004,
            "lng": -121.92851000000002
        },
        {
            "lat": 37.40565,
            "lng": -121.92848000000001
        },
        {
            "lat": 37.40641,
            "lng": -121.92819000000001
        },
        {
            "lat": 37.40643,
            "lng": -121.92818000000001
        },
        {
            "lat": 37.40648,
            "lng": -121.92817000000001
        },
        {
            "lat": 37.40654,
            "lng": -121.92816
        },
        {
            "lat": 37.406600000000005,
            "lng": -121.92814000000001
        },
        {
            "lat": 37.4067,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40673,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.406760000000006,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40699,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40715,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40747,
            "lng": -121.92812
        },
        {
            "lat": 37.40782,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40795,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.408170000000005,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.408350000000006,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.408570000000005,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40863,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40876,
            "lng": -121.92812
        },
        {
            "lat": 37.409310000000005,
            "lng": -121.92812
        },
        {
            "lat": 37.409850000000006,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.40997,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.410090000000004,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.41028,
            "lng": -121.92814000000001
        },
        {
            "lat": 37.41051,
            "lng": -121.92816
        },
        {
            "lat": 37.4108,
            "lng": -121.92818000000001
        },
        {
            "lat": 37.41091,
            "lng": -121.92819000000001
        },
        {
            "lat": 37.41111,
            "lng": -121.92819000000001
        },
        {
            "lat": 37.41129,
            "lng": -121.92819000000001
        },
        {
            "lat": 37.41149,
            "lng": -121.9282
        },
        {
            "lat": 37.411590000000004,
            "lng": -121.9282
        },
        {
            "lat": 37.41178,
            "lng": -121.92817000000001
        },
        {
            "lat": 37.41185,
            "lng": -121.92815000000002
        },
        {
            "lat": 37.411910000000006,
            "lng": -121.92813000000001
        },
        {
            "lat": 37.41198,
            "lng": -121.92809000000001
        },
        {
            "lat": 37.41212,
            "lng": -121.92803
        },
        {
            "lat": 37.41212,
            "lng": -121.92803
        },
        {
            "lat": 37.41136,
            "lng": -121.92584000000001
        },
        {
            "lat": 37.41129,
            "lng": -121.92564000000002
        },
        {
            "lat": 37.41118,
            "lng": -121.92524000000002
        },
        {
            "lat": 37.411100000000005,
            "lng": -121.92496000000001
        },
        {
            "lat": 37.411080000000005,
            "lng": -121.92487000000001
        },
        {
            "lat": 37.41107,
            "lng": -121.92483000000001
        },
        {
            "lat": 37.41105,
            "lng": -121.92471
        },
        {
            "lat": 37.411030000000004,
            "lng": -121.92460000000001
        },
        {
            "lat": 37.410990000000005,
            "lng": -121.92441000000001
        },
        {
            "lat": 37.41095,
            "lng": -121.92415000000001
        },
        {
            "lat": 37.41093,
            "lng": -121.92386
        },
        {
            "lat": 37.41091,
            "lng": -121.92368
        },
        {
            "lat": 37.41091,
            "lng": -121.92347000000001
        },
        {
            "lat": 37.410920000000004,
            "lng": -121.92319
        },
        {
            "lat": 37.41093,
            "lng": -121.92296
        },
        {
            "lat": 37.410940000000004,
            "lng": -121.92274
        },
        {
            "lat": 37.41096,
            "lng": -121.92246000000002
        },
        {
            "lat": 37.410990000000005,
            "lng": -121.92204000000001
        },
        {
            "lat": 37.41102,
            "lng": -121.92167
        },
        {
            "lat": 37.411060000000006,
            "lng": -121.92137000000001
        },
        {
            "lat": 37.411060000000006,
            "lng": -121.92137000000001
        },
        {
            "lat": 37.411080000000005,
            "lng": -121.92120000000001
        },
        {
            "lat": 37.411190000000005,
            "lng": -121.92121000000002
        },
        {
            "lat": 37.41124000000001,
            "lng": -121.92122
        },
        {
            "lat": 37.411370000000005,
            "lng": -121.92124000000001
        },
        {
            "lat": 37.41132,
            "lng": -121.92142000000001
        },
        {
            "lat": 37.41125,
            "lng": -121.92193
        },
        {
            "lat": 37.411210000000004,
            "lng": -121.92226000000001
        },
        {
            "lat": 37.411150000000006,
            "lng": -121.92285000000001
        },
        {
            "lat": 37.41113,
            "lng": -121.92314
        },
        {
            "lat": 37.41114,
            "lng": -121.92368
        },
        {
            "lat": 37.411150000000006,
            "lng": -121.92391
        },
        {
            "lat": 37.411190000000005,
            "lng": -121.92425000000001
        },
        {
            "lat": 37.41122,
            "lng": -121.92449
        },
        {
            "lat": 37.41124000000001,
            "lng": -121.92459000000001
        },
        {
            "lat": 37.411260000000006,
            "lng": -121.92471
        },
        {
            "lat": 37.41129,
            "lng": -121.92481000000001
        },
        {
            "lat": 37.41134,
            "lng": -121.92503
        },
        {
            "lat": 37.411370000000005,
            "lng": -121.92515000000002
        },
        {
            "lat": 37.4114,
            "lng": -121.92524000000002
        },
        {
            "lat": 37.41142,
            "lng": -121.92531000000001
        },
        {
            "lat": 37.41145,
            "lng": -121.92542000000002
        },
        {
            "lat": 37.41149,
            "lng": -121.92551000000002
        },
        {
            "lat": 37.411500000000004,
            "lng": -121.92554000000001
        },
        {
            "lat": 37.41154,
            "lng": -121.92567000000001
        },
        {
            "lat": 37.411680000000004,
            "lng": -121.92601
        },
        {
            "lat": 37.41179,
            "lng": -121.92634000000001
        },
        {
            "lat": 37.41196,
            "lng": -121.92676000000002
        },
        {
            "lat": 37.41239,
            "lng": -121.92788000000002
        },
        {
            "lat": 37.41263,
            "lng": -121.92859000000001
        },
        {
            "lat": 37.41283,
            "lng": -121.92917000000001
        },
        {
            "lat": 37.41319,
            "lng": -121.93021000000002
        },
        {
            "lat": 37.4133,
            "lng": -121.93052000000002
        },
        {
            "lat": 37.41344,
            "lng": -121.93099000000001
        },
        {
            "lat": 37.413500000000006,
            "lng": -121.93132000000001
        },
        {
            "lat": 37.41355,
            "lng": -121.93162000000001
        },
        {
            "lat": 37.413560000000004,
            "lng": -121.93174
        },
        {
            "lat": 37.41357,
            "lng": -121.93191000000002
        },
        {
            "lat": 37.41358,
            "lng": -121.93221000000001
        },
        {
            "lat": 37.41358,
            "lng": -121.93255
        },
        {
            "lat": 37.41357,
            "lng": -121.93283000000001
        },
        {
            "lat": 37.413540000000005,
            "lng": -121.93313
        },
        {
            "lat": 37.413500000000006,
            "lng": -121.93341000000001
        },
        {
            "lat": 37.413450000000005,
            "lng": -121.93371
        },
        {
            "lat": 37.41326,
            "lng": -121.93457000000001
        },
        {
            "lat": 37.41306,
            "lng": -121.93542000000001
        },
        {
            "lat": 37.41302,
            "lng": -121.93560000000001
        },
        {
            "lat": 37.41284,
            "lng": -121.9364
        },
        {
            "lat": 37.41266,
            "lng": -121.93709000000001
        },
        {
            "lat": 37.412620000000004,
            "lng": -121.93728000000002
        },
        {
            "lat": 37.41248,
            "lng": -121.93794000000001
        },
        {
            "lat": 37.41248,
            "lng": -121.93796
        },
        {
            "lat": 37.412440000000004,
            "lng": -121.93811000000001
        },
        {
            "lat": 37.41241,
            "lng": -121.93824000000001
        },
        {
            "lat": 37.41236,
            "lng": -121.93840000000002
        },
        {
            "lat": 37.412310000000005,
            "lng": -121.93856000000001
        },
        {
            "lat": 37.412240000000004,
            "lng": -121.93872
        },
        {
            "lat": 37.412220000000005,
            "lng": -121.93876000000002
        },
        {
            "lat": 37.41214,
            "lng": -121.93895
        },
        {
            "lat": 37.41208,
            "lng": -121.93908
        },
        {
            "lat": 37.411950000000004,
            "lng": -121.93934000000002
        },
        {
            "lat": 37.4119,
            "lng": -121.93947000000001
        },
        {
            "lat": 37.411840000000005,
            "lng": -121.93959000000001
        },
        {
            "lat": 37.41180000000001,
            "lng": -121.93969000000001
        },
        {
            "lat": 37.41176,
            "lng": -121.9398
        },
        {
            "lat": 37.4117,
            "lng": -121.93994
        },
        {
            "lat": 37.41163,
            "lng": -121.94016
        },
        {
            "lat": 37.411570000000005,
            "lng": -121.94032000000001
        },
        {
            "lat": 37.411550000000005,
            "lng": -121.94036000000001
        },
        {
            "lat": 37.41143,
            "lng": -121.94062000000001
        },
        {
            "lat": 37.41113,
            "lng": -121.94130000000001
        },
        {
            "lat": 37.41077000000001,
            "lng": -121.94206000000001
        },
        {
            "lat": 37.41057,
            "lng": -121.94249
        },
        {
            "lat": 37.4104,
            "lng": -121.94282000000001
        },
        {
            "lat": 37.41028,
            "lng": -121.94305000000001
        },
        {
            "lat": 37.410270000000004,
            "lng": -121.94306000000002
        },
        {
            "lat": 37.41017,
            "lng": -121.94322000000001
        },
        {
            "lat": 37.41013,
            "lng": -121.94327000000001
        },
        {
            "lat": 37.410090000000004,
            "lng": -121.94334
        },
        {
            "lat": 37.410050000000005,
            "lng": -121.94342
        },
        {
            "lat": 37.41001,
            "lng": -121.94349000000001
        },
        {
            "lat": 37.409780000000005,
            "lng": -121.94394000000001
        },
        {
            "lat": 37.40939,
            "lng": -121.94479000000001
        },
        {
            "lat": 37.409290000000006,
            "lng": -121.94499
        },
        {
            "lat": 37.408840000000005,
            "lng": -121.94594000000001
        },
        {
            "lat": 37.40845,
            "lng": -121.94677000000001
        },
        {
            "lat": 37.408350000000006,
            "lng": -121.94698000000001
        },
        {
            "lat": 37.40832,
            "lng": -121.94706000000001
        },
        {
            "lat": 37.40827,
            "lng": -121.94716000000001
        },
        {
            "lat": 37.40823,
            "lng": -121.94728
        },
        {
            "lat": 37.408170000000005,
            "lng": -121.94743000000001
        },
        {
            "lat": 37.40811,
            "lng": -121.94761000000001
        },
        {
            "lat": 37.408060000000006,
            "lng": -121.94783000000001
        },
        {
            "lat": 37.40802,
            "lng": -121.94799
        },
        {
            "lat": 37.408010000000004,
            "lng": -121.94803000000002
        },
        {
            "lat": 37.407990000000005,
            "lng": -121.94816000000002
        },
        {
            "lat": 37.407970000000006,
            "lng": -121.94833000000001
        },
        {
            "lat": 37.40796,
            "lng": -121.94844
        },
        {
            "lat": 37.40795,
            "lng": -121.94855000000001
        },
        {
            "lat": 37.40794,
            "lng": -121.94873000000001
        },
        {
            "lat": 37.40794,
            "lng": -121.94886000000001
        },
        {
            "lat": 37.40794,
            "lng": -121.94901000000002
        },
        {
            "lat": 37.40795,
            "lng": -121.94922000000001
        },
        {
            "lat": 37.407970000000006,
            "lng": -121.94938
        },
        {
            "lat": 37.407970000000006,
            "lng": -121.94943
        },
        {
            "lat": 37.408,
            "lng": -121.9496
        },
        {
            "lat": 37.408030000000004,
            "lng": -121.94975000000001
        },
        {
            "lat": 37.40807,
            "lng": -121.94993000000001
        },
        {
            "lat": 37.408120000000004,
            "lng": -121.95013000000002
        },
        {
            "lat": 37.408190000000005,
            "lng": -121.95032
        },
        {
            "lat": 37.40825,
            "lng": -121.95049000000002
        },
        {
            "lat": 37.40833000000001,
            "lng": -121.95065000000001
        },
        {
            "lat": 37.408350000000006,
            "lng": -121.95070000000001
        },
        {
            "lat": 37.408390000000004,
            "lng": -121.95078000000001
        },
        {
            "lat": 37.40847,
            "lng": -121.95094000000002
        },
        {
            "lat": 37.40849,
            "lng": -121.95097000000001
        },
        {
            "lat": 37.40861,
            "lng": -121.95118000000001
        },
        {
            "lat": 37.408620000000006,
            "lng": -121.95118000000001
        },
        {
            "lat": 37.4087,
            "lng": -121.95132000000001
        },
        {
            "lat": 37.408770000000004,
            "lng": -121.95142000000001
        },
        {
            "lat": 37.40888,
            "lng": -121.95157
        },
        {
            "lat": 37.409200000000006,
            "lng": -121.95206
        },
        {
            "lat": 37.409220000000005,
            "lng": -121.95208000000001
        },
        {
            "lat": 37.40934,
            "lng": -121.95230000000001
        },

        {
            "lat": 37.409594,
            "lng": -121.952742
        }
    ];

    var carIcon = 'images/markers/caricon.png';

    angular.module('demoApp')
        .value('CAR_PATH', pathFromDirections)
        .value('CAR_PATH_DISTANCE', 4962)
        .value('CAR_ICON', carIcon);
}());
